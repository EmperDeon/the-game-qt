Just some unused code (ex. Render from qt examples)



// EMain

QT_FORWARD_DECLARE_CLASS(QOpenGLShaderProgram)
QT_FORWARD_DECLARE_CLASS(QOpenGLTexture)

class EMWidget : public QOpenGLWidget, protected QOpenGLFunctions
{
				Q_OBJECT

public:
				explicit EMWidget(QWidget *parent = 0): QOpenGLWidget(parent),
			clearColor(Qt::black),
			xRot(0),
			yRot(0),
			zRot(0),
			program(0)
{
	memset(textures, 0, sizeof(textures));
}
				~EMWidget(){
		makeCurrent();
		vbo.destroy();
		for (int i = 0; i < 6; ++i)
						delete textures[i];
		delete program;
		doneCurrent();
}

				QSize minimumSizeHint() const override;
				QSize sizeHint() const override;
				void rotateBy(int xAngle, int yAngle, int zAngle);
				void setClearColor(const QColor &color);

signals:
				void clicked();

protected:
				void initializeGL() override;
				void paintGL() override;
				void resizeGL(int width, int height) override;
				void mousePressEvent(QMouseEvent *event) override;
				void mouseMoveEvent(QMouseEvent *event) override;
				void mouseReleaseEvent(QMouseEvent *event) override;

private:
				void makeObject();

				QColor clearColor;
				QPoint lastPos;
				int xRot;
				int yRot;
				int zRot;
				QOpenGLTexture *textures[6];
				QOpenGLShaderProgram *program;
				QOpenGLBuffer vbo;
};



// MCoreMods

MRegion reg(IRegionPos(0,0), "saves/TestWorld_1/dim0/");
	reg.write();
QTime t;
t.start();

QFile file("saves/TestWorld_1/level.dat");file.open(QIODevice::ReadOnly);
ILevelInfo* info = MLevelInfo::fromJson(QJsonDocument::fromBinaryData(file.readAll()).object());
//	MLevelInfo* info = new MLevelInfo();
info->setName("TestWorld_1");

MLevel* level = new MLevel(info);

int i = t.elapsed();
mLogI("Creating Finished in "+QString::number(i/1000) + "." + QString::number(i%1000));
t.start();

for ( int x = 0; x < 4; x++ )
for ( int y = 0; y < 4; y++ )
for ( int z = 0; z < 3; z++ )
level->addNewChunk(IChunkPos(x, y, z));

i = t.elapsed();
mLogI("Filling Finished in "+QString::number(i/1000) + "." + QString::number(i%1000));
t.start();

//	level->save();
level->load();

i = t.elapsed();
mLogI("Loading Finished in "+QString::number(i/1000) + "." + QString::number(i%1000));



QJsonObject obj;

QByteArray a;
QDataStream out(&a, QIODevice::WriteOnly);

obj["test1"] = 4294967295;
obj["test2"] = 1844674407;
obj["test3"] = 1844674407;

out << QJsonDocument(obj).toBinaryData();

mLogW(toHex(a));

char* ch = new char[a.size()];

QByteArray o1(a);
QDataStream out1(o1);
out1.skipRawData(4);
out1.readRawData(ch, a.size());
QByteArray n(ch, a.size());
mLogW(toHex(n));

/*

 QTime t;
	t.start();
	l = new MLevel("test2");
	int i = t.elapsed();
	mLogI("Creating Finished in "+QString::number(i/1000) + "." + QString::number(i%1000));

	t.start();
	l->load();
	i = t.elapsed();
	mLogI("Loading finished in "+QString::number(i/1000) + "." + QString::number(i%1000));

	t.start();
	 l->save();
	i = t.elapsed();
	mLogI("Saving finished in "+QString::number(i/1000) + "." + QString::number(i%1000));

*/



// MPerf
MPerformanceWidget::MPerformanceWidget(MCoreMods *m) {
	this->loader = m;
	this->render = varG(MGlWidget*, "mRender");
	this->fps_v = new QVector<int>;

	this->stab = new QTimer;
	this->layout = new QHBoxLayout;
	this->customPlot = new QCustomPlot;

	customPlot->addGraph(); // blue line
	customPlot->graph(0)->setPen(QPen(Qt::blue));
	customPlot->graph(0)->setBrush(QBrush(QColor(240, 255, 200)));
	customPlot->graph(0)->setAntialiasedFill(false);
	customPlot->addGraph(); // red line
	customPlot->graph(1)->setPen(QPen(Qt::red));
	customPlot->graph(0)->setChannelFillGraph(customPlot->graph(1));

	customPlot->addGraph(); // blue dot
	customPlot->graph(2)->setPen(QPen(Qt::blue));
	customPlot->graph(2)->setLineStyle(QCPGraph::lsNone);
	customPlot->graph(2)->setScatterStyle(QCPScatterStyle::ssDisc);
	customPlot->addGraph(); // red dot
	customPlot->graph(3)->setPen(QPen(Qt::red));
	customPlot->graph(3)->setLineStyle(QCPGraph::lsNone);
	customPlot->graph(3)->setScatterStyle(QCPScatterStyle::ssDisc);

	customPlot->xAxis->setTickLabelType(QCPAxis::ltDateTime);
	customPlot->xAxis->setDateTimeFormat("hh:mm:ss");
	customPlot->xAxis->setAutoTickStep(false);
	customPlot->xAxis->setTickStep(2);
	customPlot->axisRect()->setupFullAxesBox();

// make left and bottom axes transfer their ranges to right and top axes:
	connect(customPlot->xAxis, SIGNAL(rangeChanged(QCPRange)), customPlot->xAxis2, SLOT(setRange(QCPRange)));
	connect(customPlot->yAxis, SIGNAL(rangeChanged(QCPRange)), customPlot->yAxis2, SLOT(setRange(QCPRange)));

//
//	connect(stab, SIGNAL(timeout()), this, SLOT(updateFps()));
//	stab->start(0); // Interval 0 means to refresh as fast as possible



	this->stab->setInterval(10);
	connect(stab, SIGNAL(timeout()), this, SLOT(updateFps()));
	this->stab->start();

	this->layout->addWidget(customPlot);
	this->setLayout(layout);

//	this->show();

}

void MPerformanceWidget::updateFps() {
// calculate two new data points:
	double key = QDateTime::currentDateTime().toMSecsSinceEpoch()/1000.0;
	static double lastPointKey = 0;
	if (key-lastPointKey > 0.01) // at most add point every 10 ms
	{
		double value0 = qSin(key); //qSin(key*1.6+qCos(key*1.7)*2)*10 + qSin(key*1.2+0.56)*20 + 26;
		double value1 = qCos(key); //qSin(key*1.3+qCos(key*1.2)*1.2)*7 + qSin(key*0.9+0.26)*24 + 26;
		// add data to lines:
		customPlot->graph(0)->addData(key, value0);
		customPlot->graph(1)->addData(key, value1);
		// set data of dots:
		customPlot->graph(2)->clearData();
		customPlot->graph(2)->addData(key, value0);
		customPlot->graph(3)->clearData();
		customPlot->graph(3)->addData(key, value1);
		// remove data of lines that's outside visible range:
		customPlot->graph(0)->removeDataBefore(key-8);
		customPlot->graph(1)->removeDataBefore(key-8);
		// rescale value (vertical) axis to fit the current data:
		customPlot->graph(0)->rescaleValueAxis();
		customPlot->graph(1)->rescaleValueAxis(true);
		lastPointKey = key;
	}
// make key axis range scroll with the data (at a constant range size of 8):
	customPlot->xAxis->setRange(key+0.25, 8, Qt::AlignRight);
	customPlot->replot();

// calculate frames per second:
	static double lastFpsKey;
	static int frameCount;
	++frameCount;
	if (key-lastFpsKey > 2) // average fps over 2 seconds
	{
		this->setWindowTitle(
			QString("%1 FPS, Total Data points: %2")
				.arg(frameCount/(key-lastFpsKey), 0, 'f', 0)
				.arg(customPlot->graph(0)->data()->count()+customPlot->graph(1)->data()->count())
			);
		lastFpsKey = key;
		frameCount = 0;
	}
}




// MRender

QSize EMWidget::minimumSizeHint() const
{
				return QSize(50, 50);
}

QSize EMWidget::sizeHint() const
{
				return QSize(200, 200);
}

void EMWidget::rotateBy(int xAngle, int yAngle, int zAngle)
{
				xRot += xAngle;
				yRot += yAngle;
				zRot += zAngle;
				update();
}

void EMWidget::setClearColor(const QColor &color)
{
				clearColor = color;
				update();
}

void EMWidget::initializeGL()
{
				initializeOpenGLFunctions();

				makeObject();

				glEnable(GL_DEPTH_TEST);
				glEnable(GL_CULL_FACE);

#define PROGRAM_VERTEX_ATTRIBUTE 0
#define PROGRAM_TEXCOORD_ATTRIBUTE 1

				QOpenGLShader *vshader = new QOpenGLShader(QOpenGLShader::Vertex, this);
				const char *vsrc =
								"attribute highp vec4 vertex;\n"
								"attribute mediump vec4 texCoord;\n"
								"varying mediump vec4 texc;\n"
								"uniform mediump mat4 matrix;\n"
								"void main(void)\n"
								"{\n"
								"    gl_Position = matrix * vertex;\n"
								"    texc = texCoord;\n"
								"}\n";
				vshader->compileSourceCode(vsrc);

				QOpenGLShader *fshader = new QOpenGLShader(QOpenGLShader::Fragment, this);
				const char *fsrc =
								"uniform sampler2D texture;\n"
								"varying mediump vec4 texc;\n"
								"void main(void)\n"
								"{\n"
								"    gl_FragColor = texture2D(texture, texc.st);\n"
								"}\n";
				fshader->compileSourceCode(fsrc);

				program = new QOpenGLShaderProgram;
				program->addShader(vshader);
				program->addShader(fshader);
				program->bindAttributeLocation("vertex", PROGRAM_VERTEX_ATTRIBUTE);
				program->bindAttributeLocation("texCoord", PROGRAM_TEXCOORD_ATTRIBUTE);
				program->link();

				program->bind();
				program->setUniformValue("texture", 0);
}

void EMWidget::paintGL()
{
				glClearColor(clearColor.redF(), clearColor.greenF(), clearColor.blueF(), clearColor.alphaF());
				glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

				QMatrix4x4 m;
				m.ortho(-0.5f, +0.5f, +0.5f, -0.5f, 4.0f, 15.0f);
				m.translate(0.0f, 0.0f, -10.0f);
				m.rotate(xRot / 16.0f, 1.0f, 0.0f, 0.0f);
				m.rotate(yRot / 16.0f, 0.0f, 1.0f, 0.0f);
				m.rotate(zRot / 16.0f, 0.0f, 0.0f, 1.0f);

				program->setUniformValue("matrix", m);
				program->enableAttributeArray(PROGRAM_VERTEX_ATTRIBUTE);
				program->enableAttributeArray(PROGRAM_TEXCOORD_ATTRIBUTE);
				program->setAttributeBuffer(PROGRAM_VERTEX_ATTRIBUTE, GL_FLOAT, 0, 3, 5 * sizeof(GLfloat));
				program->setAttributeBuffer(PROGRAM_TEXCOORD_ATTRIBUTE, GL_FLOAT, 3 * sizeof(GLfloat), 2, 5 * sizeof(GLfloat));

				for (int i = 0; i < 6; ++i) {
								textures[i]->bind();
								glDrawArrays(GL_TRIANGLE_FAN, i * 4, 4);
				}
}
void EMWidget::resizeGL(int width, int height)
{
				int side = qMin(width, height);
				glViewport((width - side) / 2, (height - side) / 2, side, side);
}

void EMWidget::mousePressEvent(QMouseEvent *event)
{
				lastPos = event->pos();
}

void EMWidget::mouseMoveEvent(QMouseEvent *event)
{
				int dx = event->x() - lastPos.x();
				int dy = event->y() - lastPos.y();

				if (event->buttons() & Qt::LeftButton) {
								rotateBy(8 * dy, 8 * dx, 0);
				} else if (event->buttons() & Qt::RightButton) {
								rotateBy(8 * dy, 0, 8 * dx);
				}
				lastPos = event->pos();
}

void EMWidget::mouseReleaseEvent(QMouseEvent * /* event */)
{
				emit clicked();
}

void EMWidget::makeObject()
{
				static const int coords[6][4][3] = {
								{ { +1, -1, -1 }, { -1, -1, -1 }, { -1, +1, -1 }, { +1, +1, -1 } },
								{ { +1, +1, -1 }, { -1, +1, -1 }, { -1, +1, +1 }, { +1, +1, +1 } },
								{ { +1, -1, +1 }, { +1, -1, -1 }, { +1, +1, -1 }, { +1, +1, +1 } },
								{ { -1, -1, -1 }, { -1, -1, +1 }, { -1, +1, +1 }, { -1, +1, -1 } },
								{ { +1, -1, +1 }, { -1, -1, +1 }, { -1, -1, -1 }, { +1, -1, -1 } },
								{ { -1, -1, +1 }, { +1, -1, +1 }, { +1, +1, +1 }, { -1, +1, +1 } }
				};

				for (int j = 0; j < 6; ++j)
								textures[j] = new QOpenGLTexture(QImage(QString(":/images/side%1.png").arg(j + 1)).mirrored());

				QVector<GLfloat> vertData;
				for (int i = 0; i < 6; ++i) {
								for (int j = 0; j < 4; ++j) {
												// vertex position
												vertData.append(0.2 * coords[i][j][0]);
												vertData.append(0.2 * coords[i][j][1]);
												vertData.append(0.2 * coords[i][j][2]);
												// texture coordinate
												vertData.append(j == 0 || j == 3);
												vertData.append(j == 0 || j == 1);
								}
				}

				vbo.create();
				vbo.bind();
				vbo.allocate(vertData.constData(), vertData.count() * sizeof(GLfloat));
}
